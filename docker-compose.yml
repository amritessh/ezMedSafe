services:
  backend:
    build:
      context: ./ezmedsafe-backend-node
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    env_file:
      - ./ezmedsafe-backend-node/.env
    volumes:
      - ./ezmedsafe-backend-node:/app
      - backend_node_modules:/app/node_modules
      # - /app/node_modules
    depends_on:
      - neo4j
      # - redis
      # - kafka

    command: sh -c "npx prisma migrate deploy && npm start"

  frontend:
    build:
      context: ./ezmedsafe-frontend-react
      dockerfile: Dockerfile
    ports:
      - '80:80'
    env_file:
      - ./ezmedsafe-frontend-react/.env
    volumes:
      - ./ezmedsafe-frontend-react:/app
      - /app/node_modules
    depends_on:
      - backend

  data-prep:
    build:
      context: ./ezmedsafe-data-prep
      dockerfile: Dockerfile
    volumes:
      - ./ezmedsafe-data-prep:/app
    depends_on:
      - backend

  neo4j:
    image: neo4j:5.11.0-community
    container_name: ezmedsafe-neo4j
    ports:
      - '7474:7474'
      - '7687:7687'
    environment:
      - NEO4J_AUTH=neo4j/password
      # Correct Neo4j 5.x listener environment variables for Docker
      # - NEO4J_dbms_connector_http_listen_address=0.0.0.0:7474 # Standard for HTTP connector
      # - NEO4J_dbms_connector_bolt_listen_address=0.0.0.0:7687
      # - NEO4J_dbms_mode=SINGLE # Standard for Bolt connector
      # Add default listen address to ensure it binds broadly
      # - NEO4J_dbms_default_listen_address=0.0.0.0
      # Optional: Set memory limits if needed for stability on lower-res systems
      # - NEO4J_dbms_memory_heap_initial__size=512M
      # - NEO4J_dbms_memory_heap_max__size=512M
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test:
        ['CMD-SHELL', 'wget -q -O /dev/null http://localhost:7474/ || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command: '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus

  elasticsearch: # <--- UPDATE THIS SERVICE
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.6
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g # <--- INCREASED MEMORY TO 1GB
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck: # <--- INCREASED PATIENCE FOR HEALTHCHECK
      test:
        [
          'CMD-SHELL',
          'curl -s -f http://localhost:9200/_cluster/health?wait_for_status=yellow || exit 1'
        ]
      interval: 10s
      timeout: 20s # Increased timeout
      retries: 15 # Increased retries
      start_period: 90s # Increased start_period to 90 seconds (1.5 minutes)

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.6
    container_name: kibana
    ports:
      - '5601:5601'
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.6
    container_name: filebeat
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
    command: ['filebeat', '-e', '--strict.perms=false']
    depends_on:
      elasticsearch:
        condition: service_healthy

    jaeger: # <--- ADD THIS SERVICE
      image: jaegertracing/all-in-one:latest
      container_name: jaeger
      ports:
        - '4317:4317' # OTLP gRPC collector
        - '4318:4318' # OTLP HTTP collector
        - '16686:16686' # Jaeger UI
        - '14250:14250' # gRPC collector
      environment:
        - COLLECTOR_OTLP_ENABLED=true
      healthcheck:
        test:
          [
            'CMD-SHELL',
            'wget -q -O /dev/null http://localhost:16686/ || exit 1'
          ]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 20s

volumes:
  neo4j_data:
  neo4j_logs:
  backend_node_modules:
  elasticsearch_data:
